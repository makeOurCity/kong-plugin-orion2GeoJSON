# 主な開発の流れ

1. ユーザーが私に要件を伝えるので、私は「Issue作成のルール」を参考に用件をまとめながら githubにissueを作成します。
2. 私はissue上で不明点や不明瞭な部分をissue上でユーザーに質問してより要件を詳細にします。
3. issue上で 2 のやりとりを実装が行えるようになるまで行います。
4. ユーザーへ実装開始の確認を取り実装します。
5. GitHubフローに従って、私が実装に入ります。
6. 実装を終えたらテストと動作確認を私が行います。
7. テストと動作確認を終えたら変更したコードをコミットします。
8. ユーザーに報告します。その後はユーザーの指示に従いますが、要望が他にないか確認するようにします。

# コード変更に関する重要なルール

## 1. コミットの実践
- タスクが完了してユーザーに報告する準備ができたら、ソースコードの変更をコミットします。
- 作業を開始する前に、`git status`を使用して変更の状態を確認します。
- 大規模な変更を行う場合は、事前にユーザーに相談します。
- コミットメッセージには、変更の目的と影響範囲を明確に記述します。

## 2. テスト要件
- 変更をコミットする前に、すべてのテストを実行し、パスする必要があります。
- システム全体の安定性を確保するため、完全なテストスイートを実行します。

## 3. エラー処理
- テストでエラーとなった場合、闇雲に修正をしないでください。
- 失敗した理由をステップバイステップで考えて、問題の原因を特定します。
- テストが連続して3回以上失敗した場合は、作業を中止してユーザーに相談します。
- 継続的なテスト失敗が発生した場合は、対処方法についてユーザーのガイダンスを求めます。

## 4. ブランチ管理
- mainブランチへのマージが完了したブランチは、クリーンアップのために削除します。
- マージ済みのフィーチャーブランチやバグフィックスブランチは残さず、速やかに削除します。
- 削除前に、変更が正しくmainブランチに反映されていることを確認します。

# テスト実行プロセス

テストは以下の順序で実行します：

1. ユニットテスト
2. 統合テスト

テストプロセスは以下の手順で行います：
1. まず、変更したサービスのテストを個別に実行します。
2. 個別テストがパスしたら、全体のテストスイートを実行します。
3. すべてのテストがパスしたことを確認します。

# Luaのコーディング規約
- luaファイルを編集した場合は、pongo lintでチェックします

# 一時ファイルの管理

一時ファイルは全て`tmp`ディレクトリに作成します：
- Issue作成時の一時ファイル
- 実装検討時の一時ファイル
- その他の一時的なメモや文書

このディレクトリは.gitignoreで除外され、Git管理の対象外となります。

# Issue作成のルール

## Issueの内容

- 私は新機能を追加する際にIssueをまず作成してから作業を開始します。
  - Issueは日本語で記述します。
  - Issueの単位はINVESTの原則に従い、できるだけ小さくします。
- Issueの作成時には以下の情報を含めます：
  - 変更するデータモデルの詳細
  - 認証要件の変更の有無
  - 影響を受けるコマンドや機能
  - テスト計画
- Issueを作成する際は、tmpディレクトリ内の一時ファイルを使用する
  1. tmp/issue_body.mdに内容を書き出す
  2. gh issue createコマンドで一時ファイルを読み込む
  3. 作成後も一時ファイルはtmpディレクトリ内に保持される（削除不要）

## ユーザーへの質問・確認
- ユーザーに確認する際は必ず以下のいずれかで確認を行います。
  - 選択肢を用意する。
  - 質問の意図を明確に記述する。

# コミット規約

## メッセージ形式
```
[タイプ] 要約（50文字以内）

変更内容の詳細説明（全体で300文字以内）
- 変更理由
- 影響範囲
- 関連ファイル
```

## コミットタイプ
- [新規追加] 新機能の追加
- [修正] バグ修正や機能改善
- [削除] 機能やファイルの削除
- [リファクタリング] コードの整理
- [その他] その他の変更

## 記述ルール
- メッセージは全て英語で記述します。
- 要約は現在形で記述します（例：Add feature、Fix bug）。
- 要約は50文字以内、詳細を含む全体は300文字以内とします。
- 関連するIssue番号がある場合は必ず記載します。
- データモデルやエンティティ構造の変更は詳細に記述します。

## コミット例
